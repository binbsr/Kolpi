@using Kolpi.WebShared.ViewModels

@inject HttpClient Http
@inject NotificationService Notification
@inject NavigationManager Navigation

<RadzenRow Gap="1rem">
    <RadzenColumn Size="12">
        <RadzenStack>
            <RadzenFormField Text="Name" Variant="Variant.Flat">
                <RadzenTextBox @bind-Value="@Model.Name" />
            </RadzenFormField>
            <RadzenFormField Text="Details" Variant="Variant.Flat">
                <RadzenTextArea @bind-Value="@Model.Details" Rows="5" />
            </RadzenFormField>
            <RadzenFormField Text="Tag Category" Variant="Variant.Flat">
                <RadzenDropDown
                    @bind-Value=@Model.TagTypeId 
                    Data=@TagTypes 
                    TextProperty="Name" 
                    ValueProperty="Id" 
                    AllowClear=true 
                    Placeholder="Select tag category" 
                    Style="width: 100%" />
            </RadzenFormField>
            <RadzenFormField>
                <RadzenButton Text="Cancel" Click="Cancel" ButtonStyle="ButtonStyle.Info" />
                <RadzenButton Text="Save" Click="SaveTag" IsBusy="@isSaving" BusyText="Saving..." ButtonStyle="ButtonStyle.Warning"/>
            </RadzenFormField>
        </RadzenStack>
    </RadzenColumn>
</RadzenRow>

@code {

    [Parameter]
    public TagViewModel Model { get; set; } = new TagViewModel();
    
    public TagTypeViewModel[] TagTypes { get; set; } = default!;

    bool isSaving = false;

    private void TagTypeChanged(TagTypeViewModel tagTypeViewModel)
    {
        Model.TagTypeId = tagTypeViewModel.Id;
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/tags");
    }

    protected override async Task OnInitializedAsync()
    {
        TagTypes = await Http.GetFromJsonAsync<TagTypeViewModel[]>("api/tagtypes") ?? Array.Empty<TagTypeViewModel>();
    }

    private async Task SaveTag()
    {
        isSaving = true;

        Task<HttpResponseMessage> saveTask;

        if (Model.Id == default)
        {
            // Adding new
            saveTask = Http.PostAsJsonAsync("api/tags", Model);
        }
        else
        {
            // Modify existing
            saveTask = Http.PutAsJsonAsync($"api/tags/{Model.Id}", Model);
        }

        await saveTask.ContinueWith(st =>
        {
            isSaving = false;

            var result = st.Result;

            if (result.IsSuccessStatusCode)
            {
                Notification.Notify(
                new NotificationMessage
                    {
                        Summary = $"Tag saved successfully",
                        Severity = NotificationSeverity.Success,
                        Duration = 4000
                    }
            );
            }
            else
            {
                Notification.Notify(
                new NotificationMessage
                    {
                        Summary = $"Tag save failed. Error: {result.ReasonPhrase}",
                        Severity = NotificationSeverity.Error,
                        Duration = 4000
                    }
            );
            }
        });
    }
}
