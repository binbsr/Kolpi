@inject HttpClient Http

<RadzenPanel class="rz-mb-4 rz-border-info" AllowCollapse Collapse="UpdateParentModel" MouseLeave="UpdateParentModel">
    <HeaderTemplate>
        <RadzenStack AlignItems="AlignItems.Center" Orientation="Orientation.Horizontal">
            <b>@Label</b>
            @((MarkupString)Data.Body)
        </RadzenStack>        
    </HeaderTemplate>
    <ChildContent>
        <RadzenRow class="rz-my-2">
            <RadzenColumn SizeMD="10">
                <RadzenHtmlEditor @bind-Value=@Data.Body
                                  style="height: 145px;"
                                  UploadUrl="upload/image"
                                  Placeholder="Your question goes here..." />
            </RadzenColumn>
            <RadzenColumn SizeMD="2">
                <RadzenButton Icon="remove_circle" Text="Remove Data" ButtonStyle="ButtonStyle.Danger" Click="RemoveQuestion" Style="width:100%;" />
                <RadzenText TextStyle="TextStyle.DisplayH5" class="rz-mt-4" TextAlign="TextAlign.Center">@Label</RadzenText>
                <RadzenDropDown class="rz-mt-4" Data="@(Enum.GetValues<QuestionType>().Cast<Enum>())" @bind-Value=@Data.Type Style="width:100%;" />
            </RadzenColumn>
            <RadzenColumn SizeMD="12">
                <RadzenDropDown @bind-Value=Data.Tags TValue="List<TagViewModel>" Data=@Tags Context="tag"
                                Multiple=true
                                AllowClear=true
                                AllowSelectAll=false
                                Placeholder="Add tags"
                                Chips=true
                                Style="width: 100%"
                                AllowFiltering
                                FilterAsYouType
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                FilterOperator="StringFilterOperator.Contains"
                                MaxSelectedLabels="8">
                    <Template>
                        @tag.Name (@tag.TagTypeName)
                    </Template>
                </RadzenDropDown>
            </RadzenColumn>
        </RadzenRow>

        @if (Data.Type == QuestionType.Objective)
        {
            <RadzenRow>
                @{
                    char i = 'A';
                }
                @foreach (var option in Data.AnswerOptions)
                {
                    var optionLabel = "Option " + i++;
                    <RadzenColumn SizeMD="6" class="rz-background-color-base-200">
                        <AnsOption AnswerModel="@option" TextInputLabel="@optionLabel" RemoveItemCallback="() => DeleteAnsOption(option)" />
                    </RadzenColumn>
                }
                <RadzenButton Icon="add" Text="@($"Option {i}")" ButtonStyle="ButtonStyle.Success" Click="AddNewOption" title="Add new option" />

            </RadzenRow>
        }
    </ChildContent>
</RadzenPanel>

@code {

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public EventCallback<QuestionViewModel> DeleteQuestionCallback { get; set; }

    [Parameter]
    public QuestionViewModel Data { get; set; }

    [Parameter]
    public EventCallback<QuestionViewModel> DataChanged { get; set; }

    private bool isSavingQuestions;
    private string searchText = string.Empty;
    private List<TagViewModel> Tags { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        Data.AnswerOptions = new() { new(), new(), new(), new() };
        var result = await Http.GetFromJsonAsync<TagsMetaViewModel>($"api/tags?take=999999") ?? new TagsMetaViewModel();
        Tags = result.Records;
    }

    private void RemoveQuestion()
    {
        DeleteQuestionCallback.InvokeAsync(Data);
    }

    public void AddNewOption()
    {
        Data.AnswerOptions.Add(new AnswerOptionViewModel());
    }

    public void DeleteAnsOption(AnswerOptionViewModel answerOption)
    {
        Data.AnswerOptions.Remove(answerOption);
    }

    public async Task<IEnumerable<TagViewModel>> Search(string value)
    {
        List<TagViewModel> emptyModel = new();

        if (string.IsNullOrWhiteSpace(value))
            return emptyModel;

        Tags = await Http.GetFromJsonAsync<List<TagViewModel>>($"api/tags?searchText={value}") ?? emptyModel;
        return Tags;
    }

    private async Task UpdateParentModel()
    {
        await DataChanged.InvokeAsync(Data);
    }
}
