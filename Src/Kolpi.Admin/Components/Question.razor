@using Kolpi.ApplicationCore.Enums

@inject HttpClient Http
@code {
    private List<QuestionViewModel> questions = new List<QuestionViewModel>();
    private bool isSavingQuestions;

    protected override void OnInitialized()
    {
        // Initialize with one empty question
        questions.Add(new QuestionViewModel { Type = QuestionType.Objective, AnswerOptions = new List<AnswerOptionViewModel>() });
    }

    private void AddNewQuestion()
    {
        questions.Add(new QuestionViewModel { Type = QuestionType.Objective, AnswerOptions = new List<AnswerOptionViewModel>() });
    }

    private void RemoveQuestion(QuestionViewModel question)
    {
        questions.Remove(question);
    }

    private void OnSaveQuestions()
    {
        isSavingQuestions = true;
        // Logic to save all questions
        isSavingQuestions = false;
    }

}

<RadzenPanel Style="border: 10px dotted var(--rz-success)">
     @foreach (var question in questions)
{
    <div class="question-container">
        <!-- Your question UI code -->
    <RadzenHtmlEditor @bind-Value=@QuestionViewModel.Body
                      style="height: 180px;"
                      UploadUrl="upload/image"
                      Placeholder="Your question goes here..." />

    <RadzenRow AlignItems="AlignItems.Center" class="rz-my-2">
        <RadzenColumn SizeMD="10">
            <RadzenDropDown @bind-Value=@tagsSelected TValue="List<TagViewModel>" Data=@Tags Context="tag"
                            Multiple=true
                            AllowClear=true
                            AllowSelectAll=false
                            Placeholder="Click to tag your question"
                            Chips=true
                            Style="width: 100%"
                            AllowFiltering=true
                            FilterAsYouType=true
                            FilterCaseSensitivity=FilterCaseSensitivity.CaseInsensitive
                            FilterOperator="StringFilterOperator.Contains"
                            MaxSelectedLabels="8">
                <Template>
                    @tag.Name
                </Template>
            </RadzenDropDown>
        </RadzenColumn>
        <RadzenColumn SizeMD="2">
            <RadzenDropDown Data="@(Enum.GetValues<QuestionType>().Cast<Enum>())" @bind-Value=@QuestionViewModel.Type Style="width:100%;" />
        </RadzenColumn>
    </RadzenRow>

    @if (QuestionViewModel.Type == QuestionType.Objective)
    {
        <RadzenRow class="rz-border-info-lighter rz-p-4" Gap="1rem" RowGap="1rem">
            @{
                char i = 'A';
            }
            @foreach (var option in answerOptionViewModels)
            {
                var optionLabel = "Option " + i++;
                <RadzenColumn SizeMD="6" class="rz-background-color-base-200">
                    <AnsOption AnswerModel="@option" TextInputLabel="@optionLabel" RemoveItemCallback="DeleteAnsOption" />
                </RadzenColumn>
            }

            <RadzenButton Icon="add" Text="New Option" ButtonStyle="ButtonStyle.Danger" Click="AddNewOption" title="Add new option" Style="height:20px" />
        </RadzenRow>
    }
        <RadzenButton Icon="remove_circle" Text="Remove Question" ButtonStyle="ButtonStyle.Danger" Click="@(() => RemoveQuestion(question))" class="rz-mt-4" />

    </div>
}
    <RadzenButton Icon="add" Text="Add New Question" ButtonStyle="ButtonStyle.Primary" Click="AddNewQuestion" class="rz-mt-4" Style="margin-bottom: 20px" />
    <RadzenButton Icon="save" Text="Save All Questions" ButtonStyle="ButtonStyle.Success" Click="OnSaveQuestions" class="rz-mt-4" Style="margin-bottom: 20px" />
</RadzenPanel>

@code {

    private QuestionViewModel QuestionViewModel = new();
    List<AnswerOptionViewModel> answerOptionViewModels = new() { new(), new(), new(), new() };
    private List<TagViewModel> Tags { get; set; } = default!;
    List<TagViewModel> tagsSelected = new();

    protected override async Task OnInitializedAsync()
    {
        var result = await Http.GetFromJsonAsync<TagsMetaViewModel>($"api/tags?take=999999") ?? new TagsMetaViewModel();
        Tags = result.Records;
    }

    public void AddNewOption()
    {
        answerOptionViewModels.Add(new());
    }

    public void DeleteAnsOption(AnswerOptionViewModel answerOptionViewModel)
    {
        answerOptionViewModels.Remove(answerOptionViewModel);
    }

    public async Task<IEnumerable<TagViewModel>> Search(string value)
    {
        List<TagViewModel> emptyModel = new();

        if (string.IsNullOrWhiteSpace(value))
            return emptyModel;

        Tags = await Http.GetFromJsonAsync<List<TagViewModel>>($"api/tags?searchText={value}") ?? emptyModel;
        return Tags;
    }
}

