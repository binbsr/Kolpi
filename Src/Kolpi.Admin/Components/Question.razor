@using Kolpi.ApplicationCore.Enums

@inject HttpClient Http

<RadzenPanel class="rz-mb-4 rz-border-info">
    <RadzenRow AlignItems="AlignItems.Center" class="rz-my-2">
        <RadzenColumn SizeMD="10">
            <RadzenHtmlEditor @bind-Value=@question.Body
                              style="height: 150px;"
                              UploadUrl="upload/image"
                              Placeholder="Your question goes here..." />
        </RadzenColumn>
        <RadzenColumn SizeMD="2">
            <RadzenText TextStyle="TextStyle.DisplayH5" class="rz-mt-0" TextAlign="TextAlign.Center">@Label</RadzenText>
            <RadzenDropDown Data="@(Enum.GetValues<QuestionType>().Cast<Enum>())" @bind-Value=@question.Type Style="width:100%;" />
            <RadzenButton Icon="remove_circle" Text="Remove Question" ButtonStyle="ButtonStyle.Danger" Click="RemoveQuestion" class="rz-mt-4" Style="width:100%" />
        </RadzenColumn>
        <RadzenColumn SizeMD="12">
            <RadzenDropDown @bind-Value="question.Tags" TValue="List<TagViewModel>" Data=@Tags Context="tag"
                            Multiple=true
                            AllowClear=true
                            AllowSelectAll=false
                            Placeholder="Click to tag your question"
                            Chips=true
                            Style="width: 100%"
                            AllowFiltering=true
                            FilterAsYouType=true
                            FilterCaseSensitivity=FilterCaseSensitivity.CaseInsensitive
                            FilterOperator="StringFilterOperator.Contains"
                            MaxSelectedLabels="8">
                <Template>
                    @tag.Name
                </Template>
            </RadzenDropDown>
        </RadzenColumn>        
    </RadzenRow>

    @if (question.Type == QuestionType.Objective)
    {
        <RadzenRow>
            @{
                char i = 'A';
            }
            @foreach (var option in question.AnswerOptions)
            {
                var optionLabel = "Option " + i++;
                <RadzenColumn SizeMD="6" class="rz-background-color-base-200">
                    <AnsOption AnswerModel="@option" TextInputLabel="@optionLabel" RemoveItemCallback="() => DeleteAnsOption(question, option)" />
                </RadzenColumn>
            }
            <RadzenButton Icon="add" Text="@($"Option {question.AnswerOptions.Count + 1}")" ButtonStyle="ButtonStyle.Success" Click="() => AddNewOption(question)" title="Add new option" Style="height:20px" />

            @* <RadzenButton Icon="add" Text="Option" ButtonStyle="ButtonStyle.Success" Click="() => AddNewOption(question)" title="Add new option" Style="height:20px" /> *@
        </RadzenRow>
    }
</RadzenPanel>

@code {

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public EventCallback<QuestionViewModel> DeleteQuestionCallback { get; set; }

    private QuestionViewModel question = new();
    private bool isSavingQuestions;
    private List<TagViewModel> Tags { get; set; } = default!;
    private List<TagViewModel> tagsSelected = new();

    protected override async Task OnInitializedAsync()
    {
        question.AnswerOptions = new() { new(), new() };
        var result = await Http.GetFromJsonAsync<TagsMetaViewModel>($"api/tags?take=999999") ?? new TagsMetaViewModel();
        Tags = result.Records;
    }    

    private void RemoveQuestion()
    {
        DeleteQuestionCallback.InvokeAsync(question);
    }

    private void OnSaveQuestions()
    {
        isSavingQuestions = true;
        // Logic to save all questions
        //await Http.PostAsJsonAsync("api/questions", questions);
        isSavingQuestions = false;
    }

    public void AddNewOption(QuestionViewModel question)
    {
        question.AnswerOptions.Add(new AnswerOptionViewModel());
    }

    public void DeleteAnsOption(QuestionViewModel question, AnswerOptionViewModel answerOption)
    {
        question.AnswerOptions.Remove(answerOption);
    }

    public async Task<IEnumerable<TagViewModel>> Search(string value)
    {
        List<TagViewModel> emptyModel = new();

        if (string.IsNullOrWhiteSpace(value))
            return emptyModel;

        Tags = await Http.GetFromJsonAsync<List<TagViewModel>>($"api/tags?searchText={value}") ?? emptyModel;
        return Tags;
    }
}
