@page "/tags"
@using Kolpi.Shared.Extentions;

@inject HttpClient http
@inject NavigationManager Navigation

<RadzenDataGrid Count="@totalItems"
                Data="@tagViewModels"
                LoadData="@LoadData"
                GridLines="DataGridGridLines.None"
                @ref="tagsGrid"
                AllowColumnResize="true"
                AllowFiltering="true"
                FilterMode="FilterMode.Advanced"
                AllowSorting="true"
                PageSize="10"
                AllowPaging="true"
                ShowPagingSummary="true"
                TItem="TagViewModel"
                IsLoading="isLoading">
    <HeaderTemplate>
        <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="add_circle_outline" Text="New Tag" Click="AddNewTag" />
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn TItem="TagViewModel" Title="#" Width="50px" Frozen="@true" Filterable="false" TextAlign="TextAlign.Center">
            <Template Context="tag">
                @(tagViewModels?.IndexOf(tag) + 1)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TagViewModel" Property="Name" Title="Name" />
        <RadzenDataGridColumn TItem="TagViewModel" Property="Details" Title="Details" />
        <RadzenDataGridColumn TItem="TagViewModel" Property="TagTypeId" Title="Tag Category" />
        <RadzenDataGridColumn TItem="TagViewModel" Property="CreatedAt" Title="Created">
            <Template Context="tag">
                @tag.CreatedAt.Relativize()
            </Template>
            </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="TagViewModel" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="100px">
            <Template Context="tag">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Outlined" Shade="Shade.Lighter" Size="ButtonSize.Medium" Click="@(args => EditRow(tag))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Outlined" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(tag))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>


@code {

    List<TagViewModel> tagViewModels;
    private int totalItems;

    private string searchString = "";
    private RadzenDataGrid<TagViewModel> tagsGrid = default!;
    private bool isLoading = false;

    private void AddNewTag()
    {
        Navigation.NavigateTo("/tags/add");
    }

    private void EditRow(TagViewModel tag)
    {

    }

    private void DeleteRow(TagViewModel tag)
    {

    }

    //private void OnSearch(string text)
    //{
    //    searchString = text;
    //    table.ReloadServerData();
    //}

    private async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        await Task.Yield();

        string url = $"api/tags?filter={args.Filter}&skip={args.Skip.Value}&take={args.Top.Value}&orderBy={args.OrderBy}";
        var result = await http.GetFromJsonAsync<TagsFilteredViewModel>(url) ?? new TagsFilteredViewModel();

        totalItems = result.TotalCount;
        tagViewModels = result.Records;

        isLoading = false;
    }


    //private async Task Delete()
    //    {
    //    var deleteResult = await http.DeleteAsync($"api/tags");
    //    if (deleteResult.IsSuccessStatusCode)
    //    {
    //    await message.Success($"Tag deleted successfully.", 2);

    //    // Remove selected from viewmodels as well
    //    selectedRows.ForEach(item =>
    //    {
    //    tagViewModels.Remove(item);

    //    });

    //    StateHasChanged();
    //    }
    //    }
}
