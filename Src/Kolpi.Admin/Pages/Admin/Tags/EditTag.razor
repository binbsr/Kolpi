@using Kolpi.WebShared.ViewModels

@inject HttpClient Http
@inject ISnackbar SBar

<EditForm Model="@Model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudCard>
        <MudCardContent>
            <MudTextField Label="Name" 
                HelperText="At least 2 characters"
                @bind-Value="Model.Name" 
                For="@(() => Model.Name)" />
            <MudTextField Label="Details" 
                Lines="3" 
                Class="mt-3" 
                @bind-Value="Model.Details" 
                For="@(() => Model.Details)" />
            <MudAutocomplete T="TagTypeViewModel"
                Label="Tag Category"
                SearchFunc="Search"
                CoerceText="true"
                Clearable="true"
                ResetValueOnEmptyText=true
                ToStringFunc="@(e => e.Name)"
                ValueChanged = "TagTypeChanged" />
        </MudCardContent>
        <MudCardActions>
            <MudButton Disabled="isSaving" 
                ButtonType="ButtonType.Submit" 
                Variant="Variant.Filled" 
                Color="Color.Tertiary"
                StartIcon="@Icons.Material.Filled.Save" 
                Class="ml-auto">
                Save Tag
            </MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {

    [Parameter]
    public TagViewModel Model { get; set; } = new TagViewModel();
    
    public TagTypeViewModel[] TagTypes { get; set; } = default!;

    bool isSaving = false;

    private void TagTypeChanged(TagTypeViewModel tagTypeViewModel)
    {
        Model.TagTypeId = tagTypeViewModel.Id;
    }

    private async Task<IEnumerable<TagTypeViewModel>> Search(string value)
    {
        TagTypes = await Http.GetFromJsonAsync<TagTypeViewModel[]>("api/tagtypes") ?? Array.Empty<TagTypeViewModel>();

        if (string.IsNullOrEmpty(value))
            return TagTypes;
        return TagTypes.Where(y => y.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task OnValidSubmit(EditContext editContext)
    {
        isSaving = true;

        Task<HttpResponseMessage> saveTask;

        if (Model.Id == default)
        {
            // Adding new
            saveTask = Http.PostAsJsonAsync("api/tags", Model);
        }
        else
        {
            // Modify existing
            saveTask = Http.PutAsJsonAsync($"api/tags/{Model.Id}", Model);
        }

        await saveTask.ContinueWith(st =>
        {
            isSaving = false;

            var result = st.Result;

            if (result.IsSuccessStatusCode)
            {
                SBar.Add("Tag saved successfully.", Severity.Success);
            }
            else
            {
                SBar.Add($"Error occured while saving tag. Problem: {result.ReasonPhrase}", Severity.Error);
            }
        });

        StateHasChanged();
    }
}
