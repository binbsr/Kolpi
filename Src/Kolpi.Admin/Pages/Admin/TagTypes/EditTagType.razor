@using Kolpi.WebShared.ViewModels

@inject HttpClient Http
@inject NotificationService Notification
@inject NavigationManager Navigation

<RadzenRow Gap="1rem">
    <RadzenColumn Size="12">
        <RadzenStack>
            <RadzenFormField Text="Name" Variant="Variant.Flat">
                <RadzenTextBox @bind-Value="@Model.Name" />
            </RadzenFormField>
            <RadzenFormField Text="Details" Variant="Variant.Flat">
                <RadzenTextArea @bind-Value="@Model.Details" Rows="5"/>
            </RadzenFormField>
            <RadzenFormField Text="Color Code" Variant="Variant.Flat">
                <RadzenColorPicker @bind-Value="@Model.ColorCode" />
            </RadzenFormField>
            <RadzenFormField>
                <RadzenButton Text="Cancel" Click="Cancel" ButtonStyle="ButtonStyle.Info" />
                <RadzenButton Text="Save" Click="SaveTagType" IsBusy="@isSaving" BusyText="Saving..." ButtonStyle="ButtonStyle.Warning" />
            </RadzenFormField>
        </RadzenStack>
    </RadzenColumn>
</RadzenRow>

@code {

    [Parameter]
    public TagTypeViewModel Model { get; set; } = new TagTypeViewModel();
    bool isSaving = false;

    private void Cancel()
    {
        Navigation.NavigateTo("/tagtypes");
    }

    private async Task SaveTagType()
    {
        isSaving = true;

        Task<HttpResponseMessage> saveTask;

        if (Model.Id == default)
        {
            // Adding new
            saveTask = Http.PostAsJsonAsync("api/tagtypes", Model);
        }
        else
        {
            // Modifying existing
            saveTask = Http.PutAsJsonAsync($"api/tagtypes/{Model.Id}", Model);
        }

        await saveTask.ContinueWith(st =>
        {
            isSaving = false;

            var result = st.Result;

            if (result.IsSuccessStatusCode)
            {
                Notification.Notify(
                new NotificationMessage
                    {
                        Summary = $"Tag category saved successfully",
                        Severity = NotificationSeverity.Success,
                        Duration = 4000
                    }
            );
            }
            else
            {
                Notification.Notify(
                new NotificationMessage
                    {
                        Summary = $"Tag category save failed. Error: {result.ReasonPhrase}",
                        Severity = NotificationSeverity.Error,
                        Duration = 4000
                    }
            );
            }
        });

        StateHasChanged();
    }
}
