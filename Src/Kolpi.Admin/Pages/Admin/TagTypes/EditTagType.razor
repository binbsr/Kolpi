@using Kolpi.WebShared.ViewModels
@using MudBlazor.Utilities

@inject HttpClient Http
@inject ISnackbar SBar

<EditForm Model="@Model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudCard>
        <MudCardContent>
            <MudTextField Label="Name" @bind-Value="Model.Name" For="@(() => Model.Name)" />

            <MudTextField Label="Details" Lines="3" Class="mt-3" @bind-Value="Model.Details"
                For="@(() => Model.Details)" />
                
            <MudField Label="Color code">
                <input type="color" @bind-value="Model.ColorCode" /><span class="ml-3">@Model.ColorCode</span>
            </MudField>
        </MudCardContent>
        <MudCardActions>
            <MudButton Disabled="isSaving" ButtonType="ButtonType.Submit" Variant="Variant.Filled"
                Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Save" Class="ml-auto">
                Save Category
            </MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>
@code {

    [Parameter]
    public TagTypeViewModel Model { get; set; } = new TagTypeViewModel();

    public IEnumerable<MudColor> CustomPallete => new MudColor[]
    {
"#594ae2ff", "#ff4081ff", "#2196f3ff", "#00c853ff", "#ff9800ff", "#f44336ff"
    };

    bool isSaving = false;

    private void ColorChanged(MudColor color)
    {
        Model.ColorCode = color.Value;
    }

    private async Task OnValidSubmit(EditContext editContext)
    {
        isSaving = true;

        Task<HttpResponseMessage> saveTask;

        if (Model.Id == default)
        {
            // Adding new
            saveTask = Http.PostAsJsonAsync("api/tagtypes", Model);
        }
        else
        {
            // Modifying existing
            saveTask = Http.PutAsJsonAsync($"api/tagtypes/{Model.Id}", Model);
        }

        await saveTask.ContinueWith(st =>
        {
            isSaving = false;

            var result = st.Result;

            if (result.IsSuccessStatusCode)
            {
                SBar.Add("Tag category saved successfully.", Severity.Success);
            }
            else
            {
                SBar.Add($"Error occured while saving tag. Problem: {result.ReasonPhrase}", Severity.Error);
            }
        });

        StateHasChanged();
    }
}
