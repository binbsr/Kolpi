@page "/tagtypes"

@inject NavigationManager Nav
@inject HttpClient Http
@inject NotificationService Notification
@inject DialogService DialogService

@using Kolpi.WebShared.ViewModels
@using Kolpi.Admin.Components.Results

<RadzenDataGrid AllowColumnResize="true"
                AllowFiltering="true"
                FilterMode="FilterMode.Simple"
                AllowSorting="true"
                PageSize="5"
                AllowPaging="true"
                ShowPagingSummary="true"
                Data="@tagCategories"
                TItem="TagTypeViewModel"
                IsLoading="tagCategories is null">
    <HeaderTemplate>
        <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="add_circle_outline" Text="New Tag Category" Click="AddNewCategory" />
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn TItem="TagTypeViewModel" Title="#" Width="50px" Frozen="@true" Filterable="false" TextAlign="TextAlign.Center">
            <Template Context="category">
                @(tagCategories?.IndexOf(category) + 1)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TagTypeViewModel" Property="Name" Title="Name" />
        <RadzenDataGridColumn TItem="TagTypeViewModel" Property="Details" Title="Details" />
        <RadzenDataGridColumn TItem="TagTypeViewModel" Property="ColorCode" Title="Color Code" Filterable="false">
            <Template Context="category">
                <div style="height:20px; width:100%; background-color:@category.ColorCode"></div>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {

    List<TagTypeViewModel> tagCategories = default!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        tagCategories = await Http.GetFromJsonAsync<List<TagTypeViewModel>>("api/tagtypes") ?? default!;
    }

    private void AddNewCategory() => Nav.NavigateTo("/tagtypes/add");

    private async Task DeleteRow(TagTypeViewModel modelToDelete)
    {
        var result = await DialogService.Confirm($"Are you sure to delete {modelToDelete.Name}?", "Delete Category");

        if (result.HasValue || !result.Value)
            return;

        var deleteResult = await Http.DeleteAsync($"api/tagtypes/{modelToDelete.Id}");
        if (deleteResult.IsSuccessStatusCode)
        {
            Notification.Notify(
                new NotificationMessage
                    {
                        Summary = "Tag category deleted successfully.",
                        Severity = NotificationSeverity.Success,
                        Duration = 2000
                    }
            );
            tagCategories.Remove(modelToDelete);
        }
        else
        {
            Notification.Notify(
                new NotificationMessage
                    {
                        Summary = $"Tag category delete failed. Error: {deleteResult.ReasonPhrase}",
                        Severity = NotificationSeverity.Error,
                        Duration = 2000
                    }
            );
        }
    }
}
