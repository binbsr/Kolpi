@page "/tagtypes"

@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@using Kolpi.WebShared.ViewModels
@using Kolpi.Admin.Components.Results
@using MudBlazor.Utilities

@if (tagCategories is null)
{
    <Loading></Loading>
}
else
{
    <MudTable Items="@tagCategories" Hover="@true">
        <ToolBarContent>
            <MudButton Color="Color.Tertiary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add"
                Href="/tagtypes/add">
                Add Category
            </MudButton>
        </ToolBarContent>
        <HeaderContent>
            <MudTh></MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<TagTypeViewModel, object>(x => x.Name)"
                    InitialDirection="SortDirection.Ascending">Name</MudTableSortLabel>
            </MudTh>
            <MudTh>Details</MudTh>
            <MudTh>Color Code</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>
                <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Title="Remove"
                    OnClick="_ => DeleteRow(context)">
                </MudIconButton>
                <a href="/tagtypes/update/@context.Id">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" Size="Size.Small" Title="Edit"></MudIconButton>
                </a>
            </MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Details">@context.Details</MudTd>
            <MudTd DataLabel="Details">
                <span style="color:@context.ColorCode">@context.Name</span>
            </MudTd>
        </RowTemplate>        
         <NoRecordsContent>
             <MudText>No tagtypes found</MudText>
         </NoRecordsContent>
         <LoadingContent>
             <MudText>Loading...</MudText>
         </LoadingContent>         
     </MudTable>
}

@code {

    List<TagTypeViewModel> tagCategories = default!; 

    protected override async Task OnInitializedAsync()
    {
        tagCategories = await Http.GetFromJsonAsync<List<TagTypeViewModel>>("api/tagtypes") ?? default!;
    }

    private async Task DeleteRow(TagTypeViewModel modelToDelete)
    {
        var result = await DialogService.ShowMessageBox("Delete Category",
        message: $"Are you sure to delete {modelToDelete.Name}?",
        yesText: "Delete",
        cancelText: "Cancel");

        if (result == null)
            return;

        var deleteResult = await Http.DeleteAsync($"api/tagtypes/{modelToDelete.Id}");
        if (deleteResult.IsSuccessStatusCode)
        {
            Snackbar.Add("Tag category deleted successfully.", Severity.Success);
            tagCategories.Remove(modelToDelete);
        }
        else
        {
            Snackbar.Add($"Tag category delete failed. Error: {deleteResult.ReasonPhrase}", Severity.Error);
        }
    }
}
