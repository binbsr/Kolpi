@page "/tags"

@inject HttpClient http

@using Kolpi.Shared.ViewModels
@using Kolpi.Client.Components.Results

<MudTable ServerData="@(new Func<TableState, Task<TableData<TagViewModel>>>(ServerReload))"
          Dense="true" Hover="true" @ref="table">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Question Tags</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="name_field" T="TagViewModel">Tag Name</MudTableSortLabel></MudTh>
        <MudTh>Details</MudTh>
        <MudTh><MudTableSortLabel SortLabel="category_field" T="TagViewModel">Tag Category</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Name</MudTd>
        <MudTd DataLabel="Sign">@context.Details</MudTd>
        <MudTd DataLabel="Name">@context.TagTypeName</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {

    List<TagViewModel> tagViewModels = new List<TagViewModel>();
    private string searchString = "";
    private MudTable<TagViewModel> table = default!;

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private async Task<TableData<TagViewModel>> ServerReload(TableState state)
    {
        int pageIndex = state.Page;
        int pageSize = state.PageSize;
        string url = $"api/tags?searchText={searchString}&pageIndex={pageIndex}&pageSize={pageSize}";
        TagsFilteredViewModel data = await http.GetFromJsonAsync<TagsFilteredViewModel>(url) ?? new TagsFilteredViewModel();

        return new TableData<TagViewModel>() { TotalItems = data.TotalCount, Items = data.Records };
    }


    @*private async Task Delete()
        {
        var deleteResult = await http.DeleteAsync($"api/tags");
        if (deleteResult.IsSuccessStatusCode)
        {
        await message.Success($"Tag deleted successfully.", 2);

        // Remove selected from viewmodels as well
        selectedRows.ForEach(item =>
        {
        tagViewModels.Remove(item);

        });

        StateHasChanged();
        }
        }*@
}
