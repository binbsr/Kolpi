@inject HttpClient http
@inject MessageService message

@using Kolpi.Shared.ViewModels
@using OneOf

<Form Model="@TagViewModel"
      LabelCol="new ColLayoutParam { Span = 8 }"
      WrapperCol="new ColLayoutParam { Span = 16 }"
      OnFinish="OnFinish">

    <FormItem WrapperCol="new ColLayoutParam{ Offset = 8, Span = 16 }">
        <Button Icon="unordered-list" Type="dashed">
            <a href="/tags/index">Show All Tags</a>
        </Button>
    </FormItem>

    <FormItem Label="Name">
        <Input @bind-Value="@context.Name" />
    </FormItem>
    <FormItem Label="Details">
        <TextArea @bind-Value="@context.Details" />
    </FormItem>
    <FormItem Label="Tag Category">
        <Select ShowSearch DefaultValue="@context.TagTypeId.ToString()"
                Style="width: 250px"
                Placeholder="Tag Category..."
                OptionFilterProp="children"
                OnChange="OnChange"
                FilterOption="FilterOptionValue">

            @foreach (var option in tagCategories)
            {
                <SelectOption Value="@option.Id.ToString()">@option.Name</SelectOption>
            }

        </Select>
    </FormItem>
    <FormItem WrapperCol="new ColLayoutParam{ Offset = 8, Span = 16 }">
        <Button Icon="save" HtmlType="submit" Loading="@isSaving">
            Save Tag @context.Name
        </Button>
    </FormItem>
</Form>

@code {

    [Parameter]
    public TagViewModel TagViewModel { get; set; } = new TagViewModel();
    List<TagTypeViewModel> tagCategories = new List<TagTypeViewModel>();
    private readonly Func<string, SelectOption, bool> FilterOptionValue = FilterOption;
    int selectedTagTypeId = default;
    bool isSaving = false;

    private async Task OnFinish(EditContext editContext)
    {
        isSaving = true;
        await InvokeAsync(StateHasChanged);

        Task<HttpResponseMessage> saveTask;

        if (TagViewModel.Id == default)
        {
            // Adding new
            TagViewModel.TagTypeId = selectedTagTypeId;
            saveTask = http.PostAsJsonAsync("api/tags", TagViewModel);
        }
        else
        {
            // Modify existing
            TagViewModel.TagTypeId = selectedTagTypeId;
            saveTask = http.PutAsJsonAsync($"api/tags/{TagViewModel.Id}", TagViewModel);
        }

        await saveTask.ContinueWith(st =>
        {
            isSaving = false;
            InvokeAsync(StateHasChanged);

            var result = st.Result;

            if (result.IsSuccessStatusCode)
            {
                message.Success("Tag saved successfully.");
            }
            else
            {
                message.Error($"Error occured while saving tag. Problem: {result.ReasonPhrase}");
            }
        });
    }

    private static bool FilterOption(string value, SelectOption option)
    {
        var optionContent = option.Children.ToUpper();
        return optionContent.Contains(value, StringComparison.OrdinalIgnoreCase);
    }

    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)
    {
        selectedTagTypeId = int.Parse(value.AsT0);
    }

    protected override async Task OnInitializedAsync()
    {
        tagCategories = await http.GetFromJsonAsync<List<TagTypeViewModel>>("api/tagtypes");
    }
}
