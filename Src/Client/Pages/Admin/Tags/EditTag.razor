@using Kolpi.Shared.ViewModels
@using System.ComponentModel.DataAnnotations

@inject HttpClient Http
@inject ISnackbar SBar

<EditForm Model="@Model" OnValidSubmit="OnValidSubmit">
<DataAnnotationsValidator/>
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Name" HelperText="Max. 8 characters"
                              @bind-Value="Model.Name" For="@(() => Model.Name)"/>
                <MudTextField Label="Details" Class="mt-3"
                              @bind-Value="Model.Details" For="@(() => Model.Details)"/>
                <MudAutocomplete T="TagTypeViewModel"
                             Label="Tag Category"
                             SearchFunc="Search"
                             ResetValueOnEmptyText=true
                             @bind-Value="TagType"/>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
                    Save Tag
                </MudButton>
            </MudCardActions>
        </MudCard>
</EditForm>

@code {

    [Parameter]
    public TagViewModel Model { get; set; } = new TagViewModel();
    public TagTypeViewModel TagType { get; set; } = default!;
    public TagTypeViewModel[] TagTypes { get; set; } = default!;

    bool isSaving = false;

    private async Task<IEnumerable<TagTypeViewModel>> Search(string value)
    {
        TagTypes = await Http.GetFromJsonAsync<TagTypeViewModel[]>("api/tagtypes") ?? Array.Empty<TagTypeViewModel>();

        if (string.IsNullOrEmpty(value))
            return TagTypes;
        return TagTypes.Where(y => y.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task OnValidSubmit(EditContext context)
    {
        isSaving = true;

        Task<HttpResponseMessage> saveTask;
        var tagTypeId = TagTypes.FirstOrDefault(x => x.Name == Model.TagTypeName)?.Id;

        if (Model.Id == default)
        {
            // Adding new
            Model.TagTypeId = TagType.Id;
            saveTask = Http.PostAsJsonAsync("api/tags", Model);
        }
        else
        {
            // Modify existing
            Model.TagTypeId = TagType.Id;
            saveTask = Http.PutAsJsonAsync($"api/tags/{Model.Id}", Model);
        }

        await saveTask.ContinueWith(st =>
        {
            isSaving = false;

            var result = st.Result;

            if (result.IsSuccessStatusCode)
            {
                SBar.Add("The reactor is running at optimum temperature", Severity.Success);
            }
            else
            {
                SBar.Add($"Error occured while saving tag. Problem: {result.ReasonPhrase}", Severity.Error);
            }
        });

        StateHasChanged();
    }
}
