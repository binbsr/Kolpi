@page "/tagtypes"

@inject HttpClient Http
@inject ISnackbar Snackbar

@using Kolpi.Shared.ViewModels
@using Kolpi.Client.Components.Results

@if (tagCategories == null)
{
    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave"></MudSkeleton>
}
else if (tagCategories.Any())
{
    <MudTable Items="@tagCategories" Hover="@true" MultiSelection="@true" @bind-SelectedItems="selectedItems">
        <ToolBarContent>
            <MudForm @ref="deleteForm">
                <MudButton Color="Color.Error"
                       Disabled="@(SelectedRowCount <= 0)"
                       StartIcon="@Icons.Material.Filled.Delete"
                       OnClick="DeleteRows">
                    @DeleteLabel
                </MudButton>
            </MudForm>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortLabel="name_field" T="TagTypeViewModel">Category Name</MudTableSortLabel></MudTh>
            <MudTh>Details</MudTh>
            <MudTh>Color Code</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Details">@context.Details</MudTd>
            <MudTd DataLabel="Details">
                <span style="color:@context.ColorCode">@context.Name</span>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
    </MudTable>
}
else
{
    <EmptyResult />
}

@code {

    List<TagTypeViewModel> tagCategories = new List<TagTypeViewModel>();
    private MudTable<TagTypeViewModel> table = default!;
    private HashSet<TagTypeViewModel> selectedItems = new HashSet<TagTypeViewModel>();
    public int SelectedRowCount => selectedItems.Count;
    public string DeleteLabel => $"Delete {SelectedRowCount} Items";
    MudForm deleteForm;

    protected override async Task OnInitializedAsync()
    {
        tagCategories = await Http.GetFromJsonAsync<List<TagTypeViewModel>>("api/tagtypes") ?? default!;
    }

    private async Task DeleteRows(MouseEventArgs args)
    {
        var deleteResult = await Http.DeleteAsync($"api/tagtypes");
        if (deleteResult.IsSuccessStatusCode)
        {
            Snackbar.Add("Tag(s) deleted successfully.", Severity.Success);

            // Remove selected from viewmodels as well
            selectedItems.ToList().ForEach(item =>
            {
                tagCategories.Remove(item);
            });

            StateHasChanged();
        }
    }
}
