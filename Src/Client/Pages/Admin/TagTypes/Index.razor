@page "/tagtypes/index"

@inject HttpClient Http
@inject ISnackbar Snackbar

@using Kolpi.Shared.ViewModels
@using Kolpi.Client.Components.Results

@if (tagCategories == null)
{
    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave"></MudSkeleton>
}
else if (tagCategories.Any())
{
    <MudTable Items="@tagCategories" Hover="@true" CanCancelEdit="@true" IsEditRowSwitchingBlocked="@true"
        RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues" RowEditCommit="ItemHasBeenCommitted">
        <HeaderContent>
            <MudTh><MudTableSortLabel SortLabel="name_field" T="TagTypeViewModel">Category Name</MudTableSortLabel></MudTh>
            <MudTh>Details</MudTh>
            <MudTh>Color Code</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Details">@context.Details</MudTd>
            <MudTd DataLabel="Details">@context.ColorCode</MudTd>
        </RowTemplate>
        <RowEditingTemplate>
            <MudTd DataLabel="Name">
                <MudTextField @bind-Value="@context.Name" Required />
            </MudTd>
            <MudTd DataLabel="Details">
                <MudTextField @bind-Value="@context.Details" Required />
            </MudTd>
            <MudTd DataLabel="Color Code">@context.ColorCode</MudTd>
        </RowEditingTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
    </MudTable>
}
else
{
    <EmptyResult />
}

@code {

    IEnumerable<TagTypeViewModel> tagCategories = new List<TagTypeViewModel>();
    private string searchString = "";
    private MudTable<TagTypeViewModel> table = default!;
    private TagTypeViewModel elementBeforeEdit = default!;

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }
    protected override async Task OnInitializedAsync()
    {
        tagCategories = await Http.GetFromJsonAsync<TagTypeViewModel[]>("api/tagtypes") ?? default!;
    }

    private void BackupItem(object element)
    {
        elementBeforeEdit = new()
        {
            Name = ((TagTypeViewModel)element).Name,
            Details = ((TagTypeViewModel)element).Details
        };
    }

    private void ItemHasBeenCommitted(object element)
    {
        Snackbar.Add($"{((TagTypeViewModel)element).Name} is updated successfully.", Severity.Success);
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((TagTypeViewModel)element).Name = elementBeforeEdit.Name;
        ((TagTypeViewModel)element).Details = elementBeforeEdit.Details;        
    }
    
    @*private async Task Delete()
    {
        var deleteResult = await http.DeleteAsync($"api/tags");
        if (deleteResult.IsSuccessStatusCode)
        {
            await message.Success($"Tag deleted successfully.", 2);

            // Remove selected from viewmodels as well
            selectedRows.ForEach(item =>
            {
                tagViewModels.Remove(item);

            });

            StateHasChanged();
        }
    }*@
}
