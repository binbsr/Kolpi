@page "/tagtypes"

@inject HttpClient Http
@inject ISnackbar Snackbar

@using Kolpi.Shared.ViewModels
@using Kolpi.Client.Components.Results

@if (tagCategories == null)
{
    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave"></MudSkeleton>
}
else if (tagCategories.Any())
{
    <MudTable Items="@tagCategories" Hover="@true">
        <HeaderContent>
            <MudTh><MudTableSortLabel SortLabel="name_field" T="TagTypeViewModel">Category Name</MudTableSortLabel></MudTh>
            <MudTh>Details</MudTh>
            <MudTh>Color Code</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Details">@context.Details</MudTd>
            <MudTd DataLabel="Details">
                <span style="color:@context.ColorCode">@context.Name</span>
            </MudTd>
            <MudTd>
                <MudIconButton Color="Color.Error"
                       Icon="@Icons.Material.Filled.Delete"
                       Size="Size.Small"
                       Title="Remove"
                       OnClick="_ => DeleteRow(context)">                       
                </MudIconButton>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
    </MudTable>
}
else
{
    <EmptyResult />
}

@code {

    List<TagTypeViewModel> tagCategories = new List<TagTypeViewModel>();
    private MudTable<TagTypeViewModel> table = default!;
    private HashSet<TagTypeViewModel> selectedItems = new HashSet<TagTypeViewModel>();
    [Inject] private IDialogService DialogService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        tagCategories = await Http.GetFromJsonAsync<List<TagTypeViewModel>>("api/tagtypes") ?? default!;
    }

    private async Task DeleteRow(TagTypeViewModel modelToDelete)
    {
        var result = await DialogService.ShowMessageBox("Delete Category", 
            message: $"Are you sure to delete {modelToDelete.Name}?", 
            yesText: "Delete",
            cancelText: "Cancel");

        if (result == null)
            return;

        var deleteResult = await Http.DeleteAsync($"api/tagtypes/{modelToDelete.Id}");
        if (deleteResult.IsSuccessStatusCode)
        {
            Snackbar.Add("Tag category deleted successfully.", Severity.Success);
            tagCategories.Remove(modelToDelete);
        }
    }
}
