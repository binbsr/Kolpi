@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager

<AuthorizeView>
    <Authorized>
        <MudCard Elevation="0" Square="true" Class="@Class">
            <MudCardHeader>
                <CardHeaderAvatar>
                    @if (string.IsNullOrEmpty(ImageDataUrl))
                    {
                        <MudAvatar Color="Color.Secondary">@FirstLetterOfName</MudAvatar>
                    }
                    else
                    {
                        <MudAvatar Image="@ImageDataUrl" Style="height:50px; width:50px;"> </MudAvatar>
                    }
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText Typo="Typo.body2">@FirstName @SecondName</MudText>
                    <MudText Typo="Typo.caption">@Email</MudText>
                </CardHeaderContent>
            </MudCardHeader>
        </MudCard>
        <MudDivider Class="mb-2" />
        <MudList Dense="true" Clickable="true">
            <MudListItem Text="Account" Href="/authentication/profile" Icon="@Icons.Material.Outlined.Person" IconColor="Color.Warning"/>
            <MudListItem Text="Logout" Icon="@Icons.Material.Filled.Logout" OnClick="BeginSignOut" IconColor="Color.Error"/>
        </MudList>
    </Authorized>
    <NotAuthorized>
        <MudList Dense="true" Clickable="true">
            <MudListItem Text="Register" Href="/authentication/register" Icon="@Icons.Material.Outlined.PersonAdd" IconColor="Color.Warning"/>
            <MudListItem Text="Log in" Href="/authentication/login" Icon="@Icons.Material.Filled.Login" IconColor="Color.Success"/>
        </MudList>
    </NotAuthorized>
</AuthorizeView>

@code{
    [Parameter]
    public string Class { get; set; } = string.Empty;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = default!;

    private string FirstName { get; set; } = string.Empty;
    private string SecondName { get; set; } = string.Empty;
    private string Email { get; set; } = default!;
    private char FirstLetterOfName { get; set; }

    [Parameter]
    public string ImageDataUrl { get; set; } = default!;

    protected override async Task OnParametersSetAsync()
    {
        Email = (await authenticationStateTask).User.Identity.Name ?? string.Empty;
        FirstName = Email.Substring(0, Email.IndexOf('@'));
        FirstLetterOfName = FirstName[0];
    }

    protected async Task BeginSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }
}