@page "/tagtypes/add"

@inject HttpClient Http

@using Kolpi.Shared.ViewModels

<Form Model="@tagTypeViewModel"
      LabelCol="new ColLayoutParam { Span = 8 }"
      WrapperCol="new ColLayoutParam { Span = 16 }"
      OnFinish="OnFinish">

    <FormItem Label="Name">
        <Input @bind-Value="@context.Name" />
    </FormItem>
    <FormItem Label="Details">
        <TextArea @bind-Value="@context.Details" />
    </FormItem>
    <FormItem Label="Color Code">
        <Cascader @bind-Value="@context.ColorCode" Options="colors" PlaceHolder="Please select tag color..." />
    </FormItem>

    <FormItem WrapperCol="new ColLayoutParam{ Offset = 8, Span = 16 }">
        <Button Icon="save" HtmlType="submit" Loading="@isSaving">
            Save Tagtype @context.Name
        </Button>
        <a href="/tagtypes/index"><Icon Type="unordered-list"></Icon>To all tagtypes</a>
    </FormItem>
</Form>

@code {
    TagTypeViewModel tagTypeViewModel = new TagTypeViewModel();
    bool isSaving = false;

    private void OnFinish(EditContext editContext)
    {
        isSaving = true;
        InvokeAsync(StateHasChanged);

        var saveTask = Http.PostAsJsonAsync("api/tagtypes", tagTypeViewModel);

        saveTask.ContinueWith(t =>
        {
            isSaving = false;
            InvokeAsync(StateHasChanged);
        });
    }

    private List<CascaderNode> colors = new List<CascaderNode>
{
        new CascaderNode()
        {
            Value = "red",
            Label = "Red",
            Children = new []
        {
                new CascaderNode {Value = "lawngreen", Label = "Lawn Green"},
                new CascaderNode {Value = "lime", Label = "Lime"},
                new CascaderNode {Value = "forestgreen", Label = "Forest Green"},
                new CascaderNode {Value = "springgreen", Label = "Spring Green"},
            },
        },
        new CascaderNode()
        {
            Value = "green",
            Label = "Green",
            Children = new []
        {
                new CascaderNode {Value = "lawngreen", Label = "Lawn Green"},
                new CascaderNode {Value = "lime", Label = "Lime"},
                new CascaderNode {Value = "forestgreen", Label = "Forest Green"},
                new CascaderNode {Value = "springgreen", Label = "Spring Green"},
                new CascaderNode {Value = "olivedrab", Label = "Olivedrab"},
                new CascaderNode {Value = "seagreen", Label = "Sea Green"},
            },
        },
        new CascaderNode()
        {
            Value = "blue",
            Label = "Blue",
            Children = new []
        {
                new CascaderNode {Value = "lawngreen", Label = "Lawn Green"},
                new CascaderNode {Value = "lime", Label = "Lime"},
                new CascaderNode {Value = "forestgreen", Label = "Forest Green"},
                new CascaderNode {Value = "springgreen", Label = "Spring Green"},
            },
        }
    };
}
