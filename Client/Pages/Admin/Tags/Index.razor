@page "/tags/index"

@inject HttpClient http
@inject MessageService message

@using Kolpi.Shared.ViewModels
@using Kolpi.Client.Components.Results

<Space Size="middle" Style="margin-bottom:10px">
    <SpaceItem>
        <Button Shape="round" Icon="plus" Type="dashed">
            <a href="/tags/add">Add Tag</a>
        </Button>
    </SpaceItem>
    <SpaceItem>
        <Tooltip Title="@("Delete selected tags")" Placement="PlacementType.Left">
            <Button Shape="round" Type="danger" Icon="delete" Disabled="@(!selectedRows?.Any() ?? true)">
                Delete
            </Button>
        </Tooltip>
    </SpaceItem>
    <SpaceItem>
        <Tooltip Title="@("Approve selected tags")" Placement="PlacementType.Left">
            <Button Shape="round" Type="primary" Icon="check" Disabled="@(!selectedRows?.Any() ?? true)">
                Approve
            </Button>
        </Tooltip>
    </SpaceItem>
    @if (selectedRows != null && selectedRows.Any())
    {
        <SpaceItem>
            <b>@selectedRows.Count()</b> rows selected
        </SpaceItem>
    }
</Space>

<div style="float:right">
    <Space>
        <SpaceItem>
            Total <b>@_total</b> items
        </SpaceItem>
        <SpaceItem>
            Page size <b>@_pageSize</b>
        </SpaceItem>
    </Space>
</div>

@if (tagViewModels == null)
{
    <Skeleton Active></Skeleton>
}
else if (tagViewModels.Any())
{
    <Table @ref="table"
           DataSource="@tagViewModels"
           Total="_total"
           @bind-PageIndex="_pageIndex"
           @bind-PageSize="_pageSize"
           OnPageIndexChange="async e => await FetchData(e)"
           @bind-SelectedRows="selectedRows">
        <Selection Key="@(context.Id.ToString())" />
        <ActionColumn>
            <Space Size="middle">
                <SpaceItem>
                    <Button Type="dashed" Shape="circle" Size="small">
                        <a href="/tags/update/@context.Id"><Icon Type="edit"></Icon></a>
                    </Button>
                </SpaceItem>
            </Space>
        </ActionColumn>
        <Column @bind-Field="@context.Name" Sortable />
        <Column @bind-Field="@context.TagTypeName" Sortable ShowSorterTooltip="false" />
        <Column @bind-Field="@context.TagColorCode" />
        <Column @bind-Field="@context.Details" />
        <Column @bind-Field="@context.CreatedAt" Sortable />
        <Column @bind-Field="@context.ModifiedAt" Sortable />
    </Table>
}
else
{
    <EmptyResult Explanation="No tags added yet." />
}

@code {

    List<TagViewModel> tagViewModels;
    ITable table;
    int _pageIndex = 1;
    int _pageSize = 10;
    int _total = 0;
    IEnumerable<TagViewModel> selectedRows;

    protected override async Task OnParametersSetAsync()
    {
        var count = await http.GetStringAsync("api/tags/totalcount");
        _total = int.Parse(count);

        if (_total > 0)
        {
            tagViewModels = await GetTagsAsync(_pageIndex, _pageSize);
        }
    }

    public Task<List<TagViewModel>> GetTagsAsync(int pageIndex, int pageSize)
    {
        return http.GetFromJsonAsync<List<TagViewModel>>($"api/tags?pageIndex={pageIndex}&pageSize={pageSize}");
    }

    async Task FetchData(PaginationEventArgs args)
    {
        tagViewModels = await GetTagsAsync(args.PageIndex, args.PageSize);
    }

    private async Task Delete()
    {
        var deleteResult = await http.DeleteAsync($"api/tags");
        if (deleteResult.IsSuccessStatusCode)
        {
            await message.Success($"Tag deleted successfully.", 2);

            // Remove selected from viewmodels as well
            selectedRows.ForEach(item =>
            {
                tagViewModels.Remove(item);

            });

            StateHasChanged();
        }
    }
}
