@page "/tags/manage"

@inject HttpClient Http
@using Kolpi.Shared.ViewModels 

<div>
    <Row>
        <Col Span="12">
        <Table @ref="table"
               DataSource="@tagTypeViewModels"
               Total="_total"
               OnPageIndexChange="async e=>await fetchData(e)">
            
            <Selection Key="@(context.Id.ToString())" />
            <Column @bind-Field="@context.Id" />
            <Column @bind-Field="@context.Details" />
        </Table>

        <br />
        <p>pageIndex: @_pageIndex | pageSize: @_pageSize | Total: @_total</p>

        <br />
        <h5>selections:</h5>
        @if (selectedRows != null && selectedRows.Any())
        {
            <Button Danger Size="small" OnClick="@(e => { table.SetSelection(null); })">Clear</Button>

            @foreach (var selected in selectedRows)
            {
                <Tag @key="selected.Id" Closable OnClose="e=>RemoveSelection(selected.Id)">@selected.Id - @selected.Details</Tag>
            }
        }

        </Col>

        <Col Span="12">
            
        </Col>
    </Row>
</div>


@code {
    TagTypeViewModel[] tagTypeViewModels;

    IEnumerable<TagTypeViewModel> selectedRows;
    ITable table;

    int _pageIndex = 1;
    int _pageSize = 10;
    int _total = 0;

    protected override async Task OnParametersSetAsync()
    {
        tagTypeViewModels = await GetForecastAsync(1, 10);
        _total = 50;
    }

    async Task fetchData(PaginationEventArgs args)
    {
        tagTypeViewModels = await GetForecastAsync(args.PageIndex, args.PageSize);
    }

    private static readonly string[] Summaries = new[]
    {
        "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
    };

    public Task<TagTypeViewModel[]> GetForecastAsync(int pageIndex, int pageSize)
    {
        return Http.GetFromJsonAsync<TagTypeViewModel[]>("api/tagtypes");
    }

    public void RemoveSelection(int id)
    {
        var selected = selectedRows.Where(x => x.Id != id).ToList();
        table.SetSelection(selected.Select(x => x.Id.ToString()).ToArray());
    }
}
