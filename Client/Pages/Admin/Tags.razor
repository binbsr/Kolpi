@page "/tags/manage"

@inject HttpClient Http
@using Kolpi.Shared.ViewModels
@using Kolpi.Client.Components.Results
@using System.Text.Json

<div>
    <Row>
        <Col Span="12">

        </Col>

        <Col Span="12">
        @if (tagTypeViewModels.Any())
        {
            <Button Type="primary" Disabled="@disabledAddNew" Icon="plus" OnClick="@ShowAddNewUI">Add New TagType</Button>

            @if (disabledAddNew)
            {
                <Form Model="@tagTypeViewModel"
                      LabelCol="new ColLayoutParam { Span = 8 }"
                      WrapperCol="new ColLayoutParam { Span = 16 }"
                      OnFinish="OnFinish"
                      OnFinishFailed="OnFinishFailed">

                    <FormItem Label="Input">
                        <Input @bind-Value="@context.Name" />
                    </FormItem>
                    <FormItem Label="InputArea">
                        <TextArea @bind-Value="@context.Details" />
                    </FormItem>
                    <FormItem Label="Cascader">
                        <Cascader @bind-Value="@context.ColorCode" Options="colors" />
                    </FormItem>

                    <FormItem WrapperCol="new ColLayoutParam{ Offset = 8, Span = 16 }">
                        <Button Icon="save" HtmlType="submit">
                            Save
                        </Button>
                    </FormItem>
                </Form>
            }

            <Table @ref="table"
                   DataSource="@tagTypeViewModels"
                   Total="_total">

                <Selection Key="@(context.Id.ToString())" />
                <Column @bind-Field="@context.Id" />
                <Column @bind-Field="@context.Details" />

                <ActionColumn Title="Action">
                    <Space Size="middle">
                        <SpaceItem>
                            <a>Edit</a>
                        </SpaceItem>
                        <SpaceItem>
                            <a>Delete</a>
                        </SpaceItem>
                    </Space>
                </ActionColumn>
            </Table>

            <br />
            <p>Total @_total records.</p>
        }
        else
        {
            <EmptyResult Explanation="No tagtypes added yet." />
        }
        </Col>
    </Row>
</div>


@code {
    TagTypeViewModel[] tagTypeViewModels = new TagTypeViewModel[] { };
    TagTypeViewModel tagTypeViewModel = new TagTypeViewModel();
    ITable table;
    int _total = 0;

    protected override async Task OnInitializedAsync()
    {
        tagTypeViewModels = await GetTagTypesAsync();
        _total = tagTypeViewModels.Length;
    }

    public Task<TagTypeViewModel[]> GetTagTypesAsync()
    {
        return Http.GetFromJsonAsync<TagTypeViewModel[]>("api/tagtypes");
    }

    // Add new model logic
    bool disabledAddNew = false;

    private void ShowAddNewUI()
    {
        disabledAddNew = true;
    }

    private void OnFinish(EditContext editContext)
    {
        Console.WriteLine($"Success:{JsonSerializer.Serialize(tagTypeViewModel)}");
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(tagTypeViewModel)}");
    }

    private List<CascaderNode> colors = new List<CascaderNode>
    {
        new CascaderNode()
        {
            Value = "red",
            Label = "Red",
            Children = new []
            {
                new CascaderNode {Value = "lawngreen", Label = "Lawn Green"},
                new CascaderNode {Value = "lime", Label = "Lime"},
                new CascaderNode {Value = "forestgreen", Label = "Forest Green"},
                new CascaderNode {Value = "springgreen", Label = "Spring Green"},
            },
        },
        new CascaderNode()
        {
            Value = "green",
            Label = "Green",
            Children = new []
            {
                new CascaderNode {Value = "lawngreen", Label = "Lawn Green"},
                new CascaderNode {Value = "lime", Label = "Lime"},
                new CascaderNode {Value = "forestgreen", Label = "Forest Green"},
                new CascaderNode {Value = "springgreen", Label = "Spring Green"},
                new CascaderNode {Value = "olivedrab", Label = "Olivedrab"},
                new CascaderNode {Value = "seagreen", Label = "Sea Green"},
            },
        },
        new CascaderNode()
        {
            Value = "blue",
            Label = "Blue",
            Children = new []
            {
                new CascaderNode {Value = "lawngreen", Label = "Lawn Green"},
                new CascaderNode {Value = "lime", Label = "Lime"},
                new CascaderNode {Value = "forestgreen", Label = "Forest Green"},
                new CascaderNode {Value = "springgreen", Label = "Spring Green"},
            },
        }
    };
}
